local perlin = require "modules.noise"

local width, height = window.get_size()

function init(self)
	math.randomseed(os.time());
	go.set_position(vmath.vector3(width/2, height/2, 0));
	perlin.init()
end

local perlinX, perlinY = 0, 100;

function update(self, dt)
	local amount = 5;
	local x = perlin.noise(perlinX, 0, 0) * width
	local y = perlin.noise(perlinY, 0, 0) * height
	print(perlin.noise(perlinX, 0, 0))
	perlinX = perlinX + dt
	perlinY = perlinY + dt
	go.set_position(go.get_position() + vmath.vector3(x, y, 0));
--[[
	local stepX = get_accept_number() * amount;
	local direction = {true, false}
	if(direction[math.random(#direction)]) then
		stepX = stepX * -1
	end	
	local stepY = get_accept_number() * amount;
	if(direction[math.random(#direction)]) then
		stepY = stepY * -1
	end
	
	go.set_position(go.get_position() + vmath.vector3(stepX, stepY, 0));
]]--
--[[
	local stepX = math.random(-1,1) * amount;
	local stepY = math.random(-1,1) * amount;
	print(stepX..", "..stepY);
	go.set_position(go.get_position() + vmath.vector3(stepX, stepY, 0));
]]--
--[[
	if (step == 0) then
		go.set_position(go.get_position() + vmath.vector3(amount,0,0));
	elseif (step == 1) then
		go.set_position(go.get_position() + vmath.vector3(-amount,0,0));
	elseif (step == 2) then
		go.set_position(go.get_position() + vmath.vector3(0,amount,0));
	else
		go.set_position(go.get_position() + vmath.vector3(0,-amount,0));
	end
]]--
end

local function get_accept_number()
	while(true) do
		local r1 = math.random();
		local p = r1 * r1;
		local r2 = math.random();
		if(r2 < p) then return r1 end;
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
